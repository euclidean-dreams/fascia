// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLOATARRAYMORSEL_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_FLOATARRAYMORSEL_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct FloatArrayMorsel;
struct FloatArrayMorselBuilder;

struct FloatArrayMorsel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FloatArrayMorselBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD = 4,
    VT_VALUE = 6
  };
  uint64_t field() const {
    return GetField<uint64_t>(VT_FIELD, 0);
  }
  const flatbuffers::Vector<float> *value() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_FIELD) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct FloatArrayMorselBuilder {
  typedef FloatArrayMorsel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field(uint64_t field) {
    fbb_.AddElement<uint64_t>(FloatArrayMorsel::VT_FIELD, field, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(FloatArrayMorsel::VT_VALUE, value);
  }
  explicit FloatArrayMorselBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FloatArrayMorsel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FloatArrayMorsel>(end);
    return o;
  }
};

inline flatbuffers::Offset<FloatArrayMorsel> CreateFloatArrayMorsel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t field = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> value = 0) {
  FloatArrayMorselBuilder builder_(_fbb);
  builder_.add_field(field);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<FloatArrayMorsel> CreateFloatArrayMorselDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t field = 0,
    const std::vector<float> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<float>(*value) : 0;
  return ImpresarioSerialization::CreateFloatArrayMorsel(
      _fbb,
      field,
      value__);
}

inline const ImpresarioSerialization::FloatArrayMorsel *GetFloatArrayMorsel(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::FloatArrayMorsel>(buf);
}

inline const ImpresarioSerialization::FloatArrayMorsel *GetSizePrefixedFloatArrayMorsel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::FloatArrayMorsel>(buf);
}

inline bool VerifyFloatArrayMorselBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::FloatArrayMorsel>(nullptr);
}

inline bool VerifySizePrefixedFloatArrayMorselBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::FloatArrayMorsel>(nullptr);
}

inline void FinishFloatArrayMorselBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::FloatArrayMorsel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFloatArrayMorselBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::FloatArrayMorsel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_FLOATARRAYMORSEL_IMPRESARIOSERIALIZATION_H_
