// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PITCH_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_PITCH_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "PitchMethod_generated.h"
#include "FrequencyBand_generated.h"

namespace ImpresarioSerialization {

struct Pitch;
struct PitchBuilder;

struct Pitch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PitchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGINTIMESTAMP = 4,
    VT_FREQUENCYBAND = 6,
    VT_METHOD = 8,
    VT_PITCH = 10,
    VT_CONFIDENCE = 12
  };
  uint64_t originTimestamp() const {
    return GetField<uint64_t>(VT_ORIGINTIMESTAMP, 0);
  }
  ImpresarioSerialization::FrequencyBand frequencyBand() const {
    return static_cast<ImpresarioSerialization::FrequencyBand>(GetField<int8_t>(VT_FREQUENCYBAND, 0));
  }
  ImpresarioSerialization::PitchMethod method() const {
    return static_cast<ImpresarioSerialization::PitchMethod>(GetField<int8_t>(VT_METHOD, 0));
  }
  uint8_t pitch() const {
    return GetField<uint8_t>(VT_PITCH, 0);
  }
  float confidence() const {
    return GetField<float>(VT_CONFIDENCE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ORIGINTIMESTAMP) &&
           VerifyField<int8_t>(verifier, VT_FREQUENCYBAND) &&
           VerifyField<int8_t>(verifier, VT_METHOD) &&
           VerifyField<uint8_t>(verifier, VT_PITCH) &&
           VerifyField<float>(verifier, VT_CONFIDENCE) &&
           verifier.EndTable();
  }
};

struct PitchBuilder {
  typedef Pitch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_originTimestamp(uint64_t originTimestamp) {
    fbb_.AddElement<uint64_t>(Pitch::VT_ORIGINTIMESTAMP, originTimestamp, 0);
  }
  void add_frequencyBand(ImpresarioSerialization::FrequencyBand frequencyBand) {
    fbb_.AddElement<int8_t>(Pitch::VT_FREQUENCYBAND, static_cast<int8_t>(frequencyBand), 0);
  }
  void add_method(ImpresarioSerialization::PitchMethod method) {
    fbb_.AddElement<int8_t>(Pitch::VT_METHOD, static_cast<int8_t>(method), 0);
  }
  void add_pitch(uint8_t pitch) {
    fbb_.AddElement<uint8_t>(Pitch::VT_PITCH, pitch, 0);
  }
  void add_confidence(float confidence) {
    fbb_.AddElement<float>(Pitch::VT_CONFIDENCE, confidence, 0.0f);
  }
  explicit PitchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Pitch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Pitch>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pitch> CreatePitch(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t originTimestamp = 0,
    ImpresarioSerialization::FrequencyBand frequencyBand = ImpresarioSerialization::FrequencyBand::all,
    ImpresarioSerialization::PitchMethod method = ImpresarioSerialization::PitchMethod::schmitt,
    uint8_t pitch = 0,
    float confidence = 0.0f) {
  PitchBuilder builder_(_fbb);
  builder_.add_originTimestamp(originTimestamp);
  builder_.add_confidence(confidence);
  builder_.add_pitch(pitch);
  builder_.add_method(method);
  builder_.add_frequencyBand(frequencyBand);
  return builder_.Finish();
}

inline const ImpresarioSerialization::Pitch *GetPitch(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Pitch>(buf);
}

inline const ImpresarioSerialization::Pitch *GetSizePrefixedPitch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Pitch>(buf);
}

inline bool VerifyPitchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Pitch>(nullptr);
}

inline bool VerifySizePrefixedPitchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Pitch>(nullptr);
}

inline void FinishPitchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Pitch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPitchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Pitch> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_PITCH_IMPRESARIOSERIALIZATION_H_
